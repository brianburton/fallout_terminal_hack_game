#!/usr/bin/env ruby

require 'set'

# Generate words
# Loop
  # display words (include likeness if tried)
  # display tries remaining
  # read word
  # score word

class Word
  attr_reader :text, :likeness, :tried
  attr_writer :tried

  def initialize(text, likeness)
    @text = text
    @likeness = likeness
    @tried = true
  end

  def password?
    return text.length == likeness
  end

  def length
    return @text.length
  end

  def <=>(other)
      text <=> other
  end

  def to_s
    @tried ? "#{@text} (#{@likeness})" : @text
  end
end

class WordList
  attr_reader :words

  def initialize(words)
    @words = words
  end

  def word_length
    @words[0].length
  end

  def length
    @words.length
  end

  def password
    @words.each do |word|
      return word if word.password?
    end
    nil
  end

  def playable?
    above_half_length = (word_length + 1) / 2
    above_half_count = 0
    @words.each do |word|
      above_half_count += 1 if word.likeness >= above_half_length
    end
    return above_half_count.to_f >= (length.to_f / 2.75)
  end

  def tries
    @words.count { |w| w.tried }
  end

  def reset
    @words.each { |w| w.tried = false }
  end

  def each
    @words.each { |w| yield w }
  end
end

class WordMap
  def initialize
    @words = Hash.new {|hash,key| hash[key] = Array.new}
    load_file("words.txt")
#    load_file("/usr/share/dict/words")
  end

  def load_file(filename)
    File.open(filename, "r") do |f|
      f.each do |line|
        line = line.chomp.upcase
        next unless line.length >= 4
        next unless line.length <= 10
        @words[line.length] << line
      end
    end
  end

  def likeness(pwd, other)
    answer = 0
    (0...pwd.length).each do |i|
      answer += 1 if pwd[i] == other[i]
    end
    return answer
  end

  def random_words(length, num_words)
    all_words = @words[length]
    raise "insufficient words" if all_words.length < num_words
    1.upto(1000000).each do |try_number|
      answer = Set.new
      pwd = nil
      while answer.length < num_words
        word = all_words[rand(all_words.length)]
        if pwd.nil?
          pwd = word
          answer << Word.new(word, length)
        else
          word_likeness = likeness(pwd, word)
          next if word_likeness < 1 || word_likeness == length
          answer << Word.new(word, word_likeness)
        end
      end
      words = WordList.new(answer.to_a.sort)
      return words if words.playable?
    end
    raise "unable to find enough words with non-zero likeness"
  end
end

class GameMenu
  attr_reader :words

  def initialize(words)
    @words = words
  end

  def print_choices
    choice = 1
    @words.each do |word|
      prefix = ""
      if word.tried
        prefix = "   "
      else
        prefix = sprintf("%2d)", choice)
        choice += 1
      end
      print "#{prefix} #{word}\n"
    end
    print " r) reset\n"
    print " q) quit\n"
  end

  def map(c)
    return c if c == "r" || c == "q"
    c = c.to_i
    choice = 1
    @words.each do |word|
      unless word.tried
        return word if c == choice
        choice += 1
      end
    end
    return nil
  end

  def read_choice
    while true
      remaining = 4 - @words.tries
      if remaining == 1
        print "Last try: "
      else
        print "#{remaining} tries remaining: "
      end
      choice = STDIN.readline.chomp
      if choice.length > 0
        mapped = map(choice)
        return mapped unless mapped.nil?
      end
    end
  end
end

class GameLoop
  attr_reader :words

  def initialize(words)
    @words = words
  end

  def run
    menu = GameMenu.new(@words)
    @words.reset
    while @words.tries < 4
      puts
      menu.print_choices
      choice = menu.read_choice
      if choice == "r"
        @words.reset
      elsif choice == "q"
        print "#{@words.password} was the password\n"
        return "quit"
      else
        if choice.password?
          print "Success! #{choice} is the password!\n"
          return "win"
        else
          choice.tried = true
        end
      end
    end
    print "Failure... #{@words.password} was the password.\n"
    return "loss"
  end
end

class Scenario
  attr_reader :length, :num_words

  def initialize(length, num_words)
    @length = length
    @num_words = num_words
  end
end

class Game
  attr_reader :scenarios, :completed

  def initialize
    @scenarios = Array.new
    @word_map = WordMap.new
  end

  def add(length, num_words)
    @scenarios << Scenario.new(length, num_words)
  end

  def play
    completed = 0
    while completed < @scenarios.length
      print "\nCreating next word set..."
      scenario = @scenarios[completed]
      words = @word_map.random_words(scenario.length, scenario.num_words)
      puts
      loop = GameLoop.new(words)
      result = loop.run
      if result == "win"
        completed += 1
      elsif result == "quit"
        return
      end
    end
    print "\n\nWell done!  You have completed all the scenarios!\n"
  end
end

game = Game.new
game.add(4, 9)
game.add(4, 12)
game.add(5, 9)
game.add(5, 14)
game.add(6, 9)
game.add(6, 15)
game.add(7, 9)
game.add(7, 15)
game.add(8, 9)
game.add(8, 15)
game.add(10, 8)
game.add(10, 9)
game.add(10, 10)
game.play

#(4..8).each do |length|
#  (5..12).each do |num_words|
#    puts "NEW: length=#{length} num_words=#{num_words}"
#    puts wm.random_words(length, num_words)
#  end
#end
